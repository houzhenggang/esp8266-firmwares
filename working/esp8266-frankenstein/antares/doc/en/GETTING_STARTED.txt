What you'll need 
-----------------

To set up antares you'll need:
* A PC running GNU/Linux or FreeBSD
* A cross compiler for the target platform(s)
* git
* make, gcc
* flex, bison, gperf
* A bit of free time.

Preparations
-------------

First, we need to install dependencies. With 99% probability they are in your
distribution repositories. 
For Debian and Ubuntu just type in:

sudo apt-get install build-essential git flex bison gperf

In Arch Linux type this: 

sudo pacman -S git flex bison gperf

Mac OS X

brew install coreutils git make

At the time of writing kconfig-frontends have some problems compiling
on OS X, so you may want to grab a stable working version from here: 
https://github.com/LorenzMeier/Firmware/tree/master/misc/tools/kconfig-frontends


Compiling kconfig-frontends
---------------------------
Unfortunately kconfig-frontends is not found in most distro repos, 
so we'll have to compile by hand. Mac OS X users - see note above!
Grab the latest tarball from 
http://ymorin.is-a-geek.org/projects/kconfig-frontends

unpack. 

cd kconfig-frontends
./configure --prefix=/usr

You'll need a few dependencies, namely flex, bison, gperf and things
like ncurses-dev for curses frontend, qt4-dev for qt ui and so on. 
Please note, that kconfig frontends won't show up an error, if it can't
compile some frontend. So pay attention to what configure says
If something's missing - install and rerun ./configure

make
sudo make install


Setup
------

First, we need to clone antares to your local drive. 
In this examples, we'll use ~/.antares, but it can be any directory you like

git clone git://github.com/nekromant/antares.git ~/.antares

Once done, we'll need to install aproj script to the system. It is required
to bootstrap projects based on templates.
To do so, cd to ~/.antares/abootstrap
and run 

sudo make install

Or just copy aproj somewhere, where it will be in your $PATH. It's just a small
bash script, nothing more.
Finally, we need to tell the scripts where to find the global antares installation (~/.antares) so they won't try to checkout the git every time.
To do so, we need to set environment variable ANTARES_INSTALL_DIR. 
In most cases you'll need to add something like that tou your ~/.bashrc

export ANTARES_INSTALL_DIR=~/.antares

Remember to restart the shell aftrwards!

Project examples
----------------

aproj script works with project examples stored in ~/.antares_examples. 
You can add your own examples there. To get and update project examples from the git repo type:

aproj update 

This will pull you any new examples from antares-examples repository. New ones appear there from time to time. These are the starting points for your own projects.  

Bootstrapping a project
------------------------

Create a directory for your project. e.g., myfirmware

$ mkdir myfirmware
$ cd myfirmware
$ aproj

Pick an example project you want to start with
1) ./msp430/launchpad         5) ./8051/stc/urpc_demo
2) ./msp430/msp-exp430fr5739  6) ./8051/stc/blink
3) ./avr/uisp-app             7) ./8051/at89c5113-blinky
4) ./avr/2313-blinky
#? 3
Initialized empty Git repository in /tmp/a/.git/
Template installed, repo created. Please do the initial git commit now

This will copy a few files to this directory, init a git repo there, 
add a few files to the first commit and run make for the first time to 
symlink antares here. 
You can make initial commit now.

If it starts to clone antares instead - something is wrong with your 
ANTARES_INSTALL_DIR environment variable. Double check that.

Once done, you have a few targets for make.

$ make menuconfig - will bring up menuconfig. 

$ make build - will build the project for you. 

$ make clean - cleans the build files

$ make mrproper - a full purge of all build and temporary files (.config remains intact). 

$ make deploy-methodname  - will run a corresponding deploy method to flash the firmware

You can see avaliable deploy methods using 

$ make deploy-help

And enable any additional in menuconfig under 'Deployment' section

You can set default 'make' and 'make deploy' targets in 'Build system tweaks' in menuconfig

Project structure
------------------

Source code can be found in src/
Add any new and directories to the Makefile's there
To add a subdir, assign to 'subdir-y' variable

Binary files reside in images/ by default. You can change that in menuconfig
In deploy/ directory you can add your own deploy methods, specific to your project
Just copy over an existing deploy method from ~/.antares/deploy/, rename/edit Makefile/kcnf
and run 'make mrproper' to regenerate a list of avaliable methods in menuconfig
 
temporary files and autogenerated stuff go to tmp/, and is purged on 'mrproper'

Kconfig files are named 'kcnf' here. I'm too lazy to change that. 
You can add as many Kconfig options for your project as you want, just start with
a kcnf in the top level directory of your project. It's contents are wrapped into
'Project settings' menu 


Note for distro maintainers 
---------------------------------------

If you want to package antares fully - that's not a very good idea... 
As a max, you can package aproj script. Since normally you would want to add code you 
want to share between projects to antares. 
Therefore, the user needs write permissions there.  
As tradeoff - install it to /usr/src

Known problems
------------------

Q: aproj can't clone the repo. There's the output. What the heck?
---  
It looks like the examples repository hasn't been downloaded yet.
Do you want me to clone the examples repository? [y/n]
yCloning into /home/drakmail/.antares_examples...
error: error setting certificate verify locations:
 CAfile: /etc/ssl/certs/ca-certificates.crt
 CApath: none while accessing https://github.com/nekromant/antares-examples.git/info/refs
fatal: HTTP request failed
Pulling new examples (if any) from git
/usr/local/bin/aproj: line 19: cd: /home/drakmail/.antares_examples: Нет такого файла или каталога
/usr/local/bin/aproj: line 23: cd: /home/drakmail/.antares_examples: Нет такого файла или каталога
---

A: Looks like a bug with your git installation. As a temporary solution you can do this:
GIT_SSL_NO_VERIFY=true /usr/local/bin/aproj update 
