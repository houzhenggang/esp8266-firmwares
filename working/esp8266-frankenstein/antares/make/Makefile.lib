ifneq ($(CONFIG_NOCOLOR),y)
t_blk=$(shell $(ECHO) -e '\e[0;30m')
t_red=$(shell $(ECHO) -e '\e[0;31m')
t_grn=$(shell $(ECHO) -e '\e[0;32m')
t_ylw=$(shell $(ECHO) -e '\e[0;33m')
t_blu=$(shell $(ECHO) -e '\e[0;34m')
t_pur=$(shell $(ECHO) -e '\e[0;35m')
t_cyn=$(shell $(ECHO) -e '\e[0;36m')
t_wht=$(shell $(ECHO) -e '\e[0;37m')

tb_blk=$(shell $(ECHO) -e '\e[1;30m')
tb_red=$(shell $(ECHO) -e '\e[1;31m')
tb_grn=$(shell $(ECHO) -e '\e[1;32m')
tb_ylw=$(shell $(ECHO) -e '\e[1;33m')
tb_blu=$(shell $(ECHO) -e '\e[1;34m')
tb_pur=$(shell $(ECHO) -e '\e[1;35m')
tb_cyn=$(shell $(ECHO) -e '\e[1;36m')
tb_wht=$(shell $(ECHO) -e '\e[1;37m')

tu_blk=$(shell $(ECHO) -e '\e[4;30m')
tu_red=$(shell $(ECHO) -e '\e[4;31m')
tu_grn=$(shell $(ECHO) -e '\e[4;32m')
tu_ylw=$(shell $(ECHO) -e '\e[4;33m')
tu_blu=$(shell $(ECHO) -e '\e[4;34m')
tu_pur=$(shell $(ECHO) -e '\e[4;35m')
tu_cyn=$(shell $(ECHO) -e '\e[4;36m')
tu_wht=$(shell $(ECHO) -e '\e[4;37m')

bg_blk=$(shell $(ECHO) -e '\e[40m')
bg_red=$(shell $(ECHO) -e '\e[41m')
bg_grn=$(shell $(ECHO) -e '\e[42m')
bg_ylw=$(shell $(ECHO) -e '\e[43m')
bg_blu=$(shell $(ECHO) -e '\e[44m')
bg_pur=$(shell $(ECHO) -e '\e[45m')
bg_cyn=$(shell $(ECHO) -e '\e[46m')
bg_wht=$(shell $(ECHO) -e '\e[47m')
col_rst=$(shell $(ECHO) -e '\e[0m')
endif


ifeq (0,${MAKELEVEL})
ifeq ($(CONFIG_THREADED),y)
	MAKEFLAGS+=-j$(CONFIG_THREADS)
endif
endif

Q:=
#When the build is ! 'even more verbose' we place @ istread of Q
ifneq ($(CONFIG_BUILD_VERBOSE),y)
Q=@
endif

ifneq ($(CONFIG_BUILD_VERBOSE),y)
   SILENT_VER      = @echo '  $(tb_ylw)[VERSION]$(col_rst)  ' "$(VERSION_MAJOR).$(VERSION_MINOR), $(VERSION_CODENAME); git commit: $(VERSION_GIT)  ";
   SILENT_CFG      = @echo '  $(tb_cyn)[CFG]$(col_rst)       '
   SILENT_CC       = @echo '  $(tb_ylw)[CC]$(col_rst)       ' $(subst $(TOPDIR)/build,,$(@:$(BUILD_DIR)/%.o=%.c));
   SILENT_HOSTCC       = @echo '  $(tb_ylw)[HOSTCC]$(col_rst)       ' $(subst $(TOPDIR)/build,,$(@:$(BUILD_DIR)/%.o=%.c));
   SILENT_AS       = @echo '  $(tb_ylw)[AS]$(col_rst)       ' $(subst $(TOPDIR)/build,,$(@:$(BUILD_DIR)/%.o=%.S));
   SILENT_CXX      = @echo '  $(tb_ylw)[CXX]$(col_rst)      ' $(subst $(TOPDIR)/build,,$(@:$(BUILD_DIR)/%.o=%.cpp));
   SILENT_LD       = @echo '  $(tb_pur)[LD]$(col_rst)       ' $(subst $(TOPDIR)/build,,$(@));
   SILENT_AR       = @echo '  $(tb_pur)[AR]$(col_rst)       ' $(subst $(TOPDIR)/build,,$(@));
   SILENT_GEN      = @echo '  $(tb_cyn)[GEN]$(col_rst)      ' $(subst $(TOPDIR)/build,,$(@)); 
   SILENT_GEN2      = @echo '  $(tb_cyn)[GEN]$(col_rst)      ' $(subst $(TOPDIR)/build,,$$(@)); 

   SILENT_DL       = @echo '  $(tb_cyn)[DOWNLOAD]$(col_rst) ' $(PACKAGE);
   SILENT_PATCH    = @echo '  $(tb_cyn)[PATCH]$(col_rst)    ' $(PACKAGE);
   SILENT_CHECK    = @echo '  $(tb_cyn)[CHECK]$(col_rst)    ' $(1);
   SILENT_UPDATE   = @echo '  $(tb_cyn)[UPD]$(col_rst)      ' $(PACKAGE);
   SILENT_PARSE    = @echo '  $(tb_cyn)[PARSE]$(col_rst)    '
   SILENT_OBJCOPY  = @echo '  $(tb_blu)[OBJCOPY]$(col_rst)  ' $(@F);
   SILENT_BISON    = @echo '  $(tb_pur)[BISON]$(col_rst)    ' $(@F);
   SILENT_TAGS     = @echo '  $(tb_pur)[TAGS]$(col_rst)     ' Generating TAGS file ;
   SILENT_FLEX     = @echo '  $(tb_pur)[FLEX]$(col_rst)     ' $(@F);
   SILENT_CLEAN    = @echo '  $(tb_pur)[CLEAN]$(col_rst)    ' cleaning up build directory and temporary files;
   SILENT_MRPROPER = @echo '  $(tb_pur)[MRPROPER]$(col_rst) ' purging everything;

   SILENT_GPERF    = @echo '  $(tb_pur)[GPERF]$(col_rst)    ' $(@F);

   SILENT_EXTRA    = @echo '  $(tb_pur)[EXTRA]$(col_rst)    ' $$(@);

   SILENT_DISAS    = @echo '  $(tb_blu)[DISAS]$(col_rst)    ' $(@:$(BUILD_DIR)/%.bin=%);
   SILENT_OBJDUMP  = @echo '  $(tb_blu)[OBJDUMP]$(col_rst)  ' $(OBJDUMP);
   SILENT_HOSTCC   = @echo '  $(tb_ylw)[HOSTCC]$(col_rst)   ' $(@:$(BUILD_DIR)/%.o=%.c);
SILENT_HEX2BIN   = @echo '  $(tb_pur)[HEX2BIN]$(col_rst)   ' $(@);

   #Shut up this crap
   MAKEFLAGS+=--no-print-directory
endif

SILENT_INFO	   = @echo '  $(tb_grn)[INFO]$(col_rst)     ' 

define ldmakes
$(eval subdirs=$(addprefix $(1),$(filter %/,$(objects-y))))
$(eval objects+=$(addprefix $(BUILD_DIR)$(1), $(filter %.o,$(objects-y))))
$(eval alien+=$(addprefix $(BUILD_DIR)$(1), $(filter %.mk,$(objects-y))))
$(eval objects-y= )
$(foreach dir, $(subdirs),$(eval include $(dir)Makefile) $(call includedir,$(dir)) $(call ldmakes,$(dir)))
endef

check_root=$(if $(1),sudo,)

#Code generation helpers

define newline


endef


define c_define_or
#define $(1) ( 0 $(foreach el, $(2),| $(el)) )  
endef

define c_header_start
/* autogenerated, do not edit */
#ifndef $(1)
#define $(1)
endef

define c_header_end
#endif
endef

define generate
$(subst $(newline),\n,$(call $(1),$(2),$(3),$(4)))
endef

# var, kconfig, append_if_y, append_if_n
define check_and_append
ifeq ($$(CONFIG_$(2)),y)
$(1)+=$(3)
else
$(1)+=$(4)
endif
endef

# var, kconfig, define, append_if_y, append_if_n
define check_and_define
ifeq ($$(CONFIG_$(2)),y)
$(1)+=\#define $(3) $(4)\n
else
$(1)+=\#define $(3) $(5)\n
endif
endef

unquote=$(subst ",,$(1))
